/**
 * Created by ryanconklin on 10/25/16.
 */

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.htmlunit.HtmlUnitDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.util.concurrent.TimeUnit;

import static junit.framework.TestCase.assertTrue;
import static org.junit.Assert.assertFalse;


public class ToolBoxUtil {
    private static WebDriver driver;

    String superAdminUserName = "ryanc@ceterus.com";
    String superAdminPassword = "rR19006766";
    String adminUsername = "test@test.com";
    String admingPassword = "@dm!n73$t";
    String clientControllerUsername = "cct@test.com";
    String clientControllerPassword = "cl!3n7Contr0ll3r73$t";
    String dataEntryUsername = "det@test.com";
    String dataEntryPassword = "d@7@7e$t";
    String clientUserName = "client.ryanc@ceterus.com";
    String clientPassword = "rR19006766";


    public ToolBoxUtil(String browserType){
        if(browserType.equals("CHROME")){

            try{
                System.setProperty("webdriver.chrome.driver", "/Users/ryanconklin/development/chromedriver");
                driver = new ChromeDriver();
            } catch(Exception e) {
                System.out.println("Error during Chrome Test Setup" + e.toString());
            }

        } else if(browserType.equals("FIREFOX")){
            try{
                System.setProperty("webdriver.firefox.driver", "/Users/ryanconklin/development/geckodriver");
                driver = new FirefoxDriver();
            } catch(Exception e){
                System.out.println("Error during Firefox Test Setup" + e.toString());
            }

        } else if(browserType.equals("HTML")){
            try{
                driver = new HtmlUnitDriver(true);
            } catch(Exception e){
                System.out.println("Error during HtmlUnit Test Setup" + e.toString());
            }
        }
    }

    //Click the Reset Password link on client side
    public void clickResetPassword(){
        driver.findElement(By.partialLinkText("Reset Password")).click();
    }

    //Click the Balance Sheet link on client side
    public void clickBalanceSheet(){
        driver.findElement(By.xpath("//*[@id=\"ubs\"]/a")).click();
    }

    //Click the Dashboard link on client side
    public void clickDashBoard(){
        driver.findElement(By.xpath("//*[@id=\"udb\"]/a")).click();
    }

    //Click the Select Store for Report dropdown
    public void selectStoreReportDropdown(){
        Select dropDown = new Select(driver.findElement(By.xpath("//*[contains(@id, \"" + "adminselect2" + "\")]")));
        //dropDown.selectByVisibleText("0047");
        dropDown.selectByVisibleText("AL American Fork - #0059");

    }

    //Click the Select Report Type dropdown
    public void selectReportTypeDropdown(){
        Select dropDown = new Select(driver.findElement(By.xpath("//*[@id=\"adminselectreport\"]")));
        dropDown.selectByVisibleText("Profit and Loss");
    }



    //Click the reports opiton from the hamburger on Ceterus Dashboard
    public void clickReportsHamburger(){
        driver.findElement(By.partialLinkText("Reports")).click();
    }

    //Click the logout link on client side insight
    public void clickClientLogout(){
        driver.findElement(By.xpath("/html/body/div[1]/div/div/nav/section/ul[2]/li[2]/a")).click();

    }

    //Click the Report Date dropdown
    public void selectReportDateDropdown(){
        //TODO Report Date is not selecting as expected
        Select dropDown = new Select(driver.findElement(By.xpath("//*[@id=\"admindatelabel2\"]/select[1]")));
        dropDown.selectByVisibleText("June");
    }

    //Click the Select Store dropdown
    public void selectStoreDropdown(){
        Select dropDown = new Select(driver.findElement(By.xpath("//*[@id=\"adminselect2\"]")));
        dropDown.selectByVisibleText("AL Ashley Park - #0121");
    }

    //Click the Upload Type dropdown and select a value
    public void selectUploadTypeDropdown(){
        Select dropDown = new Select(driver.findElement(By.xpath("//*[@id=\"adminselectreport\"]")));
        //QBO is currently index value 5
        dropDown.selectByIndex(5);
    }

    //Click the upload data option from the hamburger on Ceterus Dashboard
    public void clickUploadDataHamburger() {driver.findElement(By.xpath("//*[@id=\"menu\"]/ul/li[3]/a")).click();}

    //Click the stores option from hamburger on Ceterus Dashboard
    public void clickStoresHamburger(){
        driver.findElement(By.partialLinkText("Stores")).click();
    }

    //Click the logout option from hamburger on Ceterus Dashboard
    public void clickLogoutHamburger(){
        driver.findElement(By.partialLinkText("Logout")).click();
    }

    //Click the hamburger on Ceterus Dashboard
    public void clickHamburger(){
        driver.findElement(By.xpath("//span[contains(@id, \"" + "menuToggle" + "\")]")).click();
    }

    //Close the driver
    public void closeWebDriver(){ driver.quit();}

    //Access driver
    public WebDriver getDriver(){return driver;}

    //Set implicit Wait
    public void impWait(){
        driver.manage().timeouts().implicitlyWait(45, TimeUnit.SECONDS);
    }

    //Set Expected Condition for "email_address"
    public void setExpectedConEmailAddress(){
        WebElement userNameTextInput = (new WebDriverWait(driver, 45))
                .until(ExpectedConditions.presenceOfElementLocated(By.name("email_address")));
    }

    //Forgot password info
    public void sendUserNameStoreNumber(){
        driver.findElement(By.name("email_address")).sendKeys("ryanc@ceterus.com");
        //Al McDowell Mountain Ranch #0047
        //Locate Storenumber text input field
        driver.findElement(By.xpath("/html/body/div/div/div[1]/form/input[2]")).sendKeys("0047");
    }

    //Login as Super admin
    public void sendSuperAdminUserPassCeterus(){
        driver.findElement(By.name("email_address")).sendKeys(superAdminUserName);
        driver.findElement(By.name("password")).sendKeys(superAdminPassword);
        //Click login button
        driver.findElement(By.xpath("/html/body/div[1]/div/div[1]/form/input[4]")).click();
    }

    //Login as admin
    public void sendAdminUserPassCeterus(){
        driver.findElement(By.name("email_address")).sendKeys(adminUsername);
        driver.findElement(By.name("password")).sendKeys(admingPassword);
        //Click login button
        driver.findElement(By.xpath("/html/body/div[1]/div/div[1]/form/input[4]")).click();
    }

    //Login as client controller
    public void sendClientControllerUserPassCeterus(){
        driver.findElement(By.name("email_address")).sendKeys(clientControllerUsername);
        driver.findElement(By.name("password")).sendKeys(clientControllerPassword);
        //Click login button
        driver.findElement(By.xpath("/html/body/div[1]/div/div[1]/form/input[4]")).click();
    }

    //Login as data entry
    public void sendDataEntryUserPassCeterus(){
        driver.findElement(By.name("email_address")).sendKeys(dataEntryUsername);
        driver.findElement(By.name("password")).sendKeys(dataEntryPassword);
        //Click login button
        driver.findElement(By.xpath("/html/body/div[1]/div/div[1]/form/input[4]")).click();
    }

    //Login as client
    public void sendClientUserPassCeterus(){
        driver.findElement(By.name("email_address")).sendKeys(clientUserName);
        driver.findElement(By.name("password")).sendKeys(clientPassword);
        //Click login button
        driver.findElement(By.xpath("/html/body/div[1]/div/div[1]/form/input[4]")).click();
    }

    //Target Ceterus Admin region
    public void getUrlCeterusRegion(){
        driver.get("https://verify.ceterusinsight.com/admin/admin_region.php");
    }

    //Target Ceterus Admin process
    public void getUrlCeterusProcess(){
        driver.get("https://verify.ceterusinsight.com/admin/admin_process.php");
    }

    //Target Ceterus Admin process tasks
    public void getUrlCeterusProcessTasks(){
        driver.get("https://verify.ceterusinsight.com/admin/admin_process_tasks.php");
    }

    //Target Ceterus Admin process task
    public void getUrlCeterusProcessTask(){
        driver.get("https://verify.ceterusinsight.com/admin/admin_process_task.php");
    }

    //Target Ceterus Admin process task test
    public void getUrlCeterusTaskTest(){
        driver.get("https://verify.ceterusinsight.com/admin/admin_process_task_test.php");
    }

    //Target Ceterus Admin result items
    public void getUrlCeterusResultItems(){
        driver.get("https://verify.ceterusinsight.com/admin/admin_process_result_items.php");
    }

    //Target Ceterus Admin process clone
    public void getUrlCeterusProcessClone(){
        driver.get("https://verify.ceterusinsight.com/admin/admin_process_clone.php");
    }

    //Target Ceterus Admin process result item
    public void getUrlCeterusProcessResultItem(){
        driver.get("https://verify.ceterusinsight.com/admin/admin_process_result_item.php");
    }

    //Target Ceterus Admin metrics
    public void getUrlCeterusMetrics(){
        driver.get("https://verify.ceterusinsight.com/admin/admin_metrics.php");
    }

    //Target Ceterus Admin export
    public void getUrlCeterusExport(){
        driver.get("https://verify.ceterusinsight.com/admin/admin_export.php");
    }

    //Target Ceterus Admin custom Metrics
    public void getUrlCeterusAdminCustomMetrics(){
        driver.get("https://verify.ceterusinsight.com/admin/admin_customMetrics.php");
    }

    //Target Ceterus Admin codes
    public void getUrlCeterusAdminCodes(){
        driver.get("https://verify.ceterusinsight.com/admin/admin_codes.php");
    }

    //Target Ceterus Admin code maps
    public void getUrlCeterusAdminCodeMaps(){
        driver.get("https://verify.ceterusinsight.com/admin/admin_code_maps.php");
    }

    //Target Ceterus Admin benchmarks
    public void getUrlCeterusAdminBenchmark(){
        driver.get("https://verify.ceterusinsight.com/admin/admin_benchmarks.php");
    }

    //Target Ceterus Admin benchmark items
    public void getUrlCeterusAdminBenchmarkItems(){
        driver.get("https://verify.ceterusinsight.com/admin/admin_benchmark_items.php");
    }

    //Target Ceterus Admin balance sheet
    public void getUrlCeterusAdminBalanceSheet(){
        driver.get("https://verify.ceterusinsight.com/admin/admin_balancesheet.php");
    }

    //Target Ceterus Admin add update metrics
    public void getUrlCeterusAdminAddUpdateMetric(){
        driver.get("https://verify.ceterusinsight.com/admin/admin_addUpdate_metrics.php");
    }

    //Target Ceterus Admin add update custom metrics
    public void getUrlCeterusAdminAddUpdateCustomMetrics(){
        driver.get("https://verify.ceterusinsight.com/admin/admin_addUpdate_customMetrics.php");
    }

    //Target Ceterus Admin maps
    public void getUrlCeterusAdminMaps(){
        driver.get("https://verify.ceterusinsight.com/admin/admin_maps.php");
    }

    //Target Ceterus Admin search users
    public void getUrlCeterusAdminSearchUsers() { driver.get("https://verify.ceterusinsight.com/admin/admin_search_users.php"); }

    //Target Ceterus Test URL
    public void getUrlTestCeterus(){
        driver.get("https://test.ceterusinsight.com/login.php");
    }

    //Target Ceterus Verify URL
    public void getUrlVerifyCeterus(){
        driver.get("https://verify.ceterusinsight.com/login.php");
//        Uncomment to turn up logging
//        String bodyText = driver.findElement(By.tagName("body")).getText();
//        String headText = driver.findElement(By.tagName("head")).getText();
//        System.out.println(headText);
//        System.out.println(bodyText);
    }

    //Check for "Region"
    public void checkRegionText(){
        String bodyText = driver.findElement(By.tagName("body")).getText();

        System.out.println(bodyText);

        assertTrue(String.valueOf(true), bodyText.contains("Region"));
    }

    //Check for "Automated Process"
    public void checkAutomatedProcess(){
        String bodyText = driver.findElement(By.tagName("body")).getText();

        System.out.println(bodyText);

        assertTrue(String.valueOf(true), bodyText.contains("Automated Process"));
    }

    //Check for "Create New Task"
    public void checkProcessTasks(){
        String bodyText = driver.findElement(By.tagName("body")).getText();

        System.out.println(bodyText);

        assertTrue(String.valueOf(true), bodyText.contains("Create New Task"));
    }

    //Check title
    public String getTitle(){
        String retVal = driver.getTitle();
        return retVal;
    }

    //Check for "Process Task"
    public void checkTaskTest(){
        String bodyText = driver.findElement(By.tagName("body")).getText();

        System.out.println(bodyText);

        assertTrue(String.valueOf(true), bodyText.contains("Process Task"));
    }

    //Check for "Queue Items"
    public void checkResultItems(){
        String bodyText = driver.findElement(By.tagName("body")).getText();

        System.out.println(bodyText);

        assertTrue(String.valueOf(true), bodyText.contains("Queue Items"));
    }

    //Check for "Process Result Item"
    public void checkProcessResult(){
        String bodyText = driver.findElement(By.tagName("body")).getText();

        System.out.println(bodyText);

        assertTrue(String.valueOf(true), bodyText.contains("Process Result Item"));
    }

    //Check for "Clone Automated Process"
    public void checkCloneProcess(){
        String bodyText = driver.findElement(By.tagName("body")).getText();

        System.out.println(bodyText);

        assertTrue(String.valueOf(true), bodyText.contains("Clone Automated Process"));
    }

    //Check for "Accounts"
    public void checkAccountsText(){
        String bodyText = driver.findElement(By.tagName("body")).getText();

        System.out.println(bodyText);

        assertTrue(String.valueOf(true), bodyText.contains("Accounts"));
    }

    //Check for "Concept Account Number mapped to Standard Account Number"
    public void checkConceptAccountNumberText(){
        String bodyText = driver.findElement(By.tagName("body")).getText();

        System.out.println(bodyText);

        assertTrue(String.valueOf(true), bodyText.contains("Concept Account Number mapped to Standard Account Number"));
    }

    //Check for "Export Data"
    public void checkExportDataText(){
        String bodyText = driver.findElement(By.tagName("body")).getText();

        System.out.println(bodyText);

        assertTrue(String.valueOf(true), bodyText.contains("Export Data"));
    }

    //Check for "Add New Custom Metric"
    public void checkNewCustomMetric(){
        String bodyText = driver.findElement(By.tagName("body")).getText();

        System.out.println(bodyText);

        assertTrue(String.valueOf(true), bodyText.contains("Add New Custom Metric"));
    }

    //Check for "Account Number"
    public void checkCodesText(){
        String bodyText = driver.findElement(By.tagName("body")).getText();

        System.out.println(bodyText);

        assertTrue(String.valueOf(true), bodyText.contains("Account Number"));
    }

    //Check for "Concept Chart of Accounts"
    public void checkCodeMapsText(){
        String bodyText = driver.findElement(By.tagName("body")).getText();

        System.out.println(bodyText);

        assertTrue(String.valueOf(true), bodyText.contains("Concept Chart of Accounts"));
    }

    //Check for "Benchmark Year"
    public void checkBenchMakrYearText(){
        String bodyText = driver.findElement(By.tagName("body")).getText();

        System.out.println(bodyText);

        assertTrue(String.valueOf(true), bodyText.contains("Benchmark Year"));
    }

    //Check for "Benchmark Item"
    public void checkBenchMarkItemText(){
        String bodyText = driver.findElement(By.tagName("body")).getText();

        System.out.println(bodyText);

        assertTrue(String.valueOf(true), bodyText.contains("Benchmark Item for"));
    }

    //Check for "Balance Sheet"
    public void checkBalanceSheetText(){
        String bodyText = driver.findElement(By.tagName("body")).getText();

        //System.out.println(bodyText);

        assertTrue(String.valueOf(true), bodyText.contains("Balance Sheet"));
    }

    //Check for "Metric Data"
    public void checkAddMetricDataText(){
        String bodyText = driver.findElement(By.tagName("body")).getText();

        //System.out.println(bodyText);

        assertTrue(String.valueOf(true), bodyText.contains("Metric Data"));
    }

    //Check for "Add Custom Metrics"
    public void checkAddCustomMetricsText(){
        String bodyText = driver.findElement(By.tagName("body")).getText();

        //System.out.println(bodyText);

        assertTrue(String.valueOf(true), bodyText.contains("Add Custom Metrics"));
    }

    //Check for Notice text
    public void checkNoticeText(){
       String bodyText = driver.findElement(By.tagName("body")).getText();

        System.out.println(bodyText);

         assertFalse(String.valueOf(true), bodyText.contains("Notice"));
    }

    //Check for "You tried to access an area of the system not allowed with your security clearance"
    public void checkSecurityClearanceText(){
        String bodyText = driver.findElement(By.tagName("body")).getText();

        System.out.println(bodyText);

        assertTrue(String.valueOf(true), bodyText.contains("You tried to access an area of the system not allowed with your security clearance."));
    }

    //Check for "You do not have access to this area!"
    public void checkDoNotHaveAccessText(){
        String bodyText = driver.findElement(By.tagName("body")).getText();

        System.out.println(bodyText);

        assertTrue(String.valueOf(true), bodyText.contains("You do not have access to this area!"));
    }

    //Check header text
    public void checkHeaderText(){
        String headerText = driver.findElement(By.tagName("title")).getText();

        System.out.println(headerText);

        assertTrue(String.valueOf(true), headerText.contains("Ceterus Franchise Accounting"));
    }

    //Check for reset instructions text
    public void checkResetInstructionsText(){
        String bodyText = driver.findElement(By.tagName("body")).getText();

        System.out.println(bodyText);

        assertFalse(String.valueOf(true), bodyText.contains("Password reset instructions sent to your email address."));
    }

}

